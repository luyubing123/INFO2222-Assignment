<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->



{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>


    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>



    <section id="friends_list", style="top:120px;right:500px; position:fixed">
        <p class="text">Friends List: </p>
        <ul>
        {% for friend in friendship %}
            <li>{{ friend }}</li>
        {% endfor %}
    </ul>
    </section>


    <section id="send_request", style="top:120px;left:1100px; position:fixed">
        <p class="text">Sent Friends Request: </p>
        <ul>
        {% for friend in friendrequest %}
            <li>{{ friend }}</li>
        {% endfor %}
    </ul>
    </section>


    <section id="received_request", style="top:400px;left:1100px; position:fixed">
        <p class="text">Received Friends Request: </p>
        <ul>
        {% for friend in received_pending_friendrequest %}
            <li>{{ friend }}</li>
            <button onclick="AcceptRequest('{{ friend }}',this)">Accept</button>
            <button onclick="RejectRequest('{{ friend }}',this)">Reject</button>
        {% endfor %}

        {% for friend in received_not_pending_friendrequest %}
            <li>{{ friend }}</li>
        {% endfor %}

    </ul>
    </section>


    <section id="add_friend", style="top:546px;left:360px; position:fixed">
        <p class="text">Search by name: </p>
        <input id="friendname_to_add" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="addfriend()">Add</button>
        <p id="add_status"></p>
    </section>

    
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script src="/static/js/libs/sha256.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsencrypt/3.0.0/jsencrypt.min.js"></script>

<script>

    function generateKeyPair() {
        // Create a new JSEncrypt object
        const encrypt = new JSEncrypt();

        // Generate a new key pair (default is RSA, you can specify key size if needed)
        encrypt.getKey();

        // Get the public and private keys
        const publicKey = encrypt.getPublicKey();
        const privateKey = encrypt.getPrivateKey();

        return { publicKey, privateKey };
    }
    // self pair of public and private key
    const keys = generateKeyPair();

    //encryt object used for encrypting message further
    const encrypt = new JSEncrypt();

    //decrypt object and set private key
    const decryptor = new JSEncrypt();
    decryptor.setPrivateKey(keys.privateKey);

    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })

    let publicKeyExchanged = false; // Flag to track if public key has been exchanged

    // exchanged receiver's public key
    let receicer_pubkey = "";

    socket.on("receiver_pubkey", function(data){
         receicer_pubkey = data.pubkey;
    })

    socket.on("chatmessage", function(data){
       let username = data.user;
       let decrypted_msg = decryptor.decrypt(data.enc_msg);
       let hash_received = data.h_msg

       let msg;

       if (decrypted_msg === null) {
          msg = username + ": " + record_msg; // Assuming you want to use the input message if decryption fails
        } else {
            let hash_dec_msg = CryptoJS.SHA256(decrypted_msg).toString();
            if(hash_received === hash_dec_msg){
                msg = username + ": " + decrypted_msg;
            } else{
                msg = "Message may be corrupted by the third party";
            }
        }  
        add_message(msg, "black"); // Assuming add_message function takes a message and color parameter
});


    let record_msg = "";
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        record_msg = message;
        $("#message").val("");  

        //hashed message
        let hashedMessage = CryptoJS.SHA256(message).toString();
        
        if (!publicKeyExchanged) {
        //exchange public key for the first time
           let pubkey = keys.publicKey;
           socket.emit("exchange_pubkey", username, pubkey, room_id); 
           publicKeyExchanged = true; 
        }

        //encrypted message using receiver's public key
        let encrypted_msg;
           if (receicer_pubkey !== "") {
             encrypt.setPublicKey(receicer_pubkey);
             encrypted_msg = encrypt.encrypt(message);
            } else {
               encrypted_msg = message;
            }
       
        let pubkey = receicer_pubkey;

        socket.emit("send", username, encrypted_msg, hashedMessage,room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver,(res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });

     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }


    // send message to server when user click add button
    async function addfriend() {
        
            let addfriendURL = "{{ url_for('add_friend') }}";

            let res = await axios.post(addfriendURL, {
                friendname: $("#friendname_to_add").val(),
                username: username      
            });

            document.getElementById("add_status").innerHTML = res.data;
      
            return;
    }
    // send message to server when user click accept button
    async function AcceptRequest(friend,button) {
        
            let acceptrequestURL = "{{ url_for('accept_request') }}";

            let res = await axios.post(acceptrequestURL, {
                friendname: friend,
                username: username      
            });

            var buttons = button.parentNode.getElementsByTagName('button');
            for (var i = 0; i < buttons.length; i++) {
               buttons[i].style.display = 'none';
            }

            return;
    }

    // send message to server when user click reject button
    async function RejectRequest(friend,button) {
        
            let rejectrequestURL = "{{ url_for('reject_request') }}";

            let res = await axios.post(rejectrequestURL, {
                friendname: friend,
                username: username      
            });
           
            var buttons = button.parentNode.getElementsByTagName('button');
            for (var i = 0; i < buttons.length; i++) {
               buttons[i].style.display = 'none';
            }

            return;
    }
    
</script>
{% endblock %}